//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace dboConnect
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InformatiqueEDU_TaskEntities : DbContext
    {
        public InformatiqueEDU_TaskEntities()
            : base("name=InformatiqueEDU_TaskEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Task> Task { get; set; }
        public virtual DbSet<Users> Users { get; set; }
    
        public virtual ObjectResult<CheckUser_Result> CheckUser(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckUser_Result>("CheckUser", usernameParameter);
        }
    
        public virtual ObjectResult<string> sp_GetFullname(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetFullname", userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetUser_Result> sp_GetUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUser_Result>("sp_GetUser", userIDParameter);
        }
    
        public virtual ObjectResult<sp_LoginUser_Result> sp_LoginUser(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LoginUser_Result>("sp_LoginUser", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<sp_SharchTask_Result> sp_SharchTask(Nullable<int> userID, Nullable<int> type, string keyrold)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var keyroldParameter = keyrold != null ?
                new ObjectParameter("Keyrold", keyrold) :
                new ObjectParameter("Keyrold", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SharchTask_Result>("sp_SharchTask", userIDParameter, typeParameter, keyroldParameter);
        }
    
        public virtual int sp_updateTask(Nullable<int> useriD, Nullable<int> taskID, string subjectTxt, Nullable<int> typeTask, string titleTask)
        {
            var useriDParameter = useriD.HasValue ?
                new ObjectParameter("useriD", useriD) :
                new ObjectParameter("useriD", typeof(int));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var subjectTxtParameter = subjectTxt != null ?
                new ObjectParameter("SubjectTxt", subjectTxt) :
                new ObjectParameter("SubjectTxt", typeof(string));
    
            var typeTaskParameter = typeTask.HasValue ?
                new ObjectParameter("TypeTask", typeTask) :
                new ObjectParameter("TypeTask", typeof(int));
    
            var titleTaskParameter = titleTask != null ?
                new ObjectParameter("TitleTask", titleTask) :
                new ObjectParameter("TitleTask", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updateTask", useriDParameter, taskIDParameter, subjectTxtParameter, typeTaskParameter, titleTaskParameter);
        }
    }
}
